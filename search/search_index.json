{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Selendra This site provides documentation for Selendra, A special solution for identity management, ownership of assets distribution & management, decentralized e-commerce, finance, decentralize computing and storage, and IoT applications and more. Here, you'll find both high-level and technical information for developers, collators, end users, and other Selendra network participants. This site will grow and be refined over time as Selendra is developed. We welcome you to join the Selendra community and contribute to this site and to the project. What is Selendra? Selendra is codebase for Selendra a multi-use cases blockchain super-app for the Internet 2.0. How to be part of our Community General information and other non-technical topics can be discussed in our Telegram group here . Follow us on Twitter for regular updates: @selendraio . About This Site This site is generated using mkdocs and is based on content in the selendra-docs repo, which can be found on :fontawesome-brands-github: GitHub .","title":"Home"},{"location":"#welcome-to-selendra","text":"This site provides documentation for Selendra, A special solution for identity management, ownership of assets distribution & management, decentralized e-commerce, finance, decentralize computing and storage, and IoT applications and more. Here, you'll find both high-level and technical information for developers, collators, end users, and other Selendra network participants. This site will grow and be refined over time as Selendra is developed. We welcome you to join the Selendra community and contribute to this site and to the project.","title":"Welcome to Selendra"},{"location":"#what-is-selendra","text":"Selendra is codebase for Selendra a multi-use cases blockchain super-app for the Internet 2.0.","title":"What is Selendra?"},{"location":"#how-to-be-part-of-our-community","text":"General information and other non-technical topics can be discussed in our Telegram group here . Follow us on Twitter for regular updates: @selendraio .","title":"How to be part of our Community"},{"location":"#about-this-site","text":"This site is generated using mkdocs and is based on content in the selendra-docs repo, which can be found on :fontawesome-brands-github: GitHub .","title":"About This Site"},{"location":"Integrations/polkadotjs/","text":"Polkadot.js JavaScript Library Introduction The Polkadot.js library provide application developers a set of tools to interact with Selendra Nodes using Javascript, similar to web3.js on Ethereum. Setup Polkadot.js with Selendra To get started with the Polkadot.js library, we first need to install it using the following command: yarn add @polkadot/api Once done, the simplest setup to start using the library and its methods is the following: const { ApiPromise, WsProvider } = require('@polkadot/api'); const { Keyring } = require('@polkadot/keyring'); const dest = 'destination account'; const sender = 'sender Seed'; const amount = 'Sending amount'; const provider = new WsProvider('wss://rpc-testnet.selendra.org'); // Create the API and wait until ready const api = await ApiPromise.create({ provider }); // Constuct the keying after the API (crypto has an async init) const keyring = new Keyring({ type: 'sr25519' }); const senderKey = keyring.addFromMnemonic(sender); // Get Chain Decimalse from node const decimals = api.registry.chainDecimals; // Create a extrinsic, transferring amount units to dest in xx amount const transfer = api.tx.balances.transfer(dest, (BigInt(amount * (10 ** decimals)))); // Sign and send the transaction using our account const hash = await transfer.signAndSend(senderKey); console.log(hash.toHex()); Different methods are available inside provider and wallet. Depending on which network you want to connect to, you can set the RPC_URL to the following values: Indracore standalone node (default): http://127.0.0.1:9944 Indracore TestNet: https://rpc.testnet.selendra.org Step-by-step Tutorials In the case that you are interested in a more detailed step-by-step guide, you can go to Developer documentation for all (most?) of the libraries under the polkadot-js umbrella. If you want to build, this is where to start.","title":"Polkadot.js"},{"location":"Integrations/polkadotjs/#polkadotjs-javascript-library","text":"","title":"Polkadot.js JavaScript Library"},{"location":"Integrations/polkadotjs/#introduction","text":"The Polkadot.js library provide application developers a set of tools to interact with Selendra Nodes using Javascript, similar to web3.js on Ethereum.","title":"Introduction"},{"location":"Integrations/polkadotjs/#setup-polkadotjs-with-selendra","text":"To get started with the Polkadot.js library, we first need to install it using the following command: yarn add @polkadot/api Once done, the simplest setup to start using the library and its methods is the following: const { ApiPromise, WsProvider } = require('@polkadot/api'); const { Keyring } = require('@polkadot/keyring'); const dest = 'destination account'; const sender = 'sender Seed'; const amount = 'Sending amount'; const provider = new WsProvider('wss://rpc-testnet.selendra.org'); // Create the API and wait until ready const api = await ApiPromise.create({ provider }); // Constuct the keying after the API (crypto has an async init) const keyring = new Keyring({ type: 'sr25519' }); const senderKey = keyring.addFromMnemonic(sender); // Get Chain Decimalse from node const decimals = api.registry.chainDecimals; // Create a extrinsic, transferring amount units to dest in xx amount const transfer = api.tx.balances.transfer(dest, (BigInt(amount * (10 ** decimals)))); // Sign and send the transaction using our account const hash = await transfer.signAndSend(senderKey); console.log(hash.toHex()); Different methods are available inside provider and wallet. Depending on which network you want to connect to, you can set the RPC_URL to the following values: Indracore standalone node (default): http://127.0.0.1:9944 Indracore TestNet: https://rpc.testnet.selendra.org","title":"Setup Polkadot.js with Selendra"},{"location":"Integrations/polkadotjs/#step-by-step-tutorials","text":"In the case that you are interested in a more detailed step-by-step guide, you can go to Developer documentation for all (most?) of the libraries under the polkadot-js umbrella. If you want to build, this is where to start.","title":"Step-by-step Tutorials"},{"location":"Maintain/guides-how-to-nominate-selendra/","text":"Be a Nominator (Selendra) Introduction Nominators are participants in the staking system that are responsible for electing good validators for a share in those validators' rewards. Being a nominator does not require running a node of your own or worrying about online uptime. However, a good nominator performs diligence on the validators that it elects. When looking for validators to nominate, a nominator should pay attention to its own reward percentage for nominating a specific validator - as well as the risk that it bares of being slashed if the validator gets slashed. Setting up Stash and Controller keys Nominators are recommended to set up two separate stash and controller accounts. You can generate your stash and controller account via any of the recommended methods that are detailed on the account generation page. Step 1: Bond your tokens On the UI of Selendra navigate to the \"Staking\" (underneath \"Network\") tab. The \"Account actions\" subsection allows you to stake and nominate. The \"Payouts\" subsection allows you to claim rewards from staking. The \"Targets\" subsection will help you estimate your earnings and this is where it's good to start picking favorites. The \"Waiting\" subsection lists all pending validators that are awaiting more nominations to enter the active validator set. The \"Validator Stats\" subsection allows you to query a validator's stash address and see historical charts on era points, elected stake, rewards, and slashes. Pick \"Account actions\" underneath \"Network\" > \"Staking\", then click the \"+ Nominator\" button. You will see a modal window that looks like the below: Select a \"value bonded\" that is less than the total amount of SEL you have, so you have some left over to pay transaction fees. Transaction fees are currently at least 0.0001 SEL, but they are dynamic based on a variety of factors including the load of recent blocks. Step 2: Nominate a validator You are now bonded. Being bonded means your tokens are locked and could be slashed if the validators you nominate misbehave. All bonded funds can now be distributed to up to 16 validators. Be careful about the validators you choose since you will be slashed if your validator commits an offence. Click on \"Nominate\" on an account you've bonded and you will be presented with another popup asking you to select some validators. Select them, confirm the transaction, and you're done - you are now nominating. Your nominations will become active in the next era. Step 3: Stop nominating At some point, you might decide to stop nominating one or more validators. You can always change who you're nominating, but you cannot withdraw your tokens unless you unbond them. Detailed instructions are available here (to be updated).","title":"Nominator Guide"},{"location":"Maintain/guides-how-to-nominate-selendra/#be-a-nominator-selendra","text":"","title":"Be a Nominator (Selendra)"},{"location":"Maintain/guides-how-to-nominate-selendra/#introduction","text":"Nominators are participants in the staking system that are responsible for electing good validators for a share in those validators' rewards. Being a nominator does not require running a node of your own or worrying about online uptime. However, a good nominator performs diligence on the validators that it elects. When looking for validators to nominate, a nominator should pay attention to its own reward percentage for nominating a specific validator - as well as the risk that it bares of being slashed if the validator gets slashed.","title":"Introduction"},{"location":"Maintain/guides-how-to-nominate-selendra/#setting-up-stash-and-controller-keys","text":"Nominators are recommended to set up two separate stash and controller accounts. You can generate your stash and controller account via any of the recommended methods that are detailed on the account generation page.","title":"Setting up Stash and Controller keys"},{"location":"Maintain/guides-how-to-nominate-selendra/#step-1-bond-your-tokens","text":"On the UI of Selendra navigate to the \"Staking\" (underneath \"Network\") tab. The \"Account actions\" subsection allows you to stake and nominate. The \"Payouts\" subsection allows you to claim rewards from staking. The \"Targets\" subsection will help you estimate your earnings and this is where it's good to start picking favorites. The \"Waiting\" subsection lists all pending validators that are awaiting more nominations to enter the active validator set. The \"Validator Stats\" subsection allows you to query a validator's stash address and see historical charts on era points, elected stake, rewards, and slashes. Pick \"Account actions\" underneath \"Network\" > \"Staking\", then click the \"+ Nominator\" button. You will see a modal window that looks like the below: Select a \"value bonded\" that is less than the total amount of SEL you have, so you have some left over to pay transaction fees. Transaction fees are currently at least 0.0001 SEL, but they are dynamic based on a variety of factors including the load of recent blocks.","title":"Step 1: Bond your tokens"},{"location":"Maintain/guides-how-to-nominate-selendra/#step-2-nominate-a-validator","text":"You are now bonded. Being bonded means your tokens are locked and could be slashed if the validators you nominate misbehave. All bonded funds can now be distributed to up to 16 validators. Be careful about the validators you choose since you will be slashed if your validator commits an offence. Click on \"Nominate\" on an account you've bonded and you will be presented with another popup asking you to select some validators. Select them, confirm the transaction, and you're done - you are now nominating. Your nominations will become active in the next era.","title":"Step 2: Nominate a validator"},{"location":"Maintain/guides-how-to-nominate-selendra/#step-3-stop-nominating","text":"At some point, you might decide to stop nominating one or more validators. You can always change who you're nominating, but you cannot withdraw your tokens unless you unbond them. Detailed instructions are available here (to be updated).","title":"Step 3: Stop nominating"},{"location":"Maintain/guides-how-to-setup-indracore-local-node/","text":"Setting Up a Indracore Node and Connecting to the Polkadot JS GUI Introduction This guide outlines the steps needed to create a standalone local node for testing of Indracore. If you follow to the end of this guide, you will have a Indracore node running in your local environment and will be able to connect it to the default Polkadot JS GUI. Installation and Setup We start by cloning the Indracore following repo: https://github.com/selendra/indracore page. git clone https://github.com/selendra/indracore.git Next, install Substrate and all its prerequisites (including Rust) by executing: curl https://getsubstrate.io -sSf | bash -s -- --fast Now, lets make some checks (correct version of Rust nightly) with the initialization script: ./scripts/init.sh Once you have followed all of the procedures above, it's time to build the standalone node by running: cargo build --release Here is what the tail end of the build output should look like: Then, you will want to run the node in dev mode using the following command: ./target/release/indracore --dev You should see an output that looks like the following, showing that blocks are being produced: Connecting Polkadot JS Apps to a Local Indracore Node On the UI of Selendra click on the top left corner to open the menu to configure the networks, and then navigate down to open the Development sub-menu. In there, you will want to toggle the \"Local Node\" option, which points Polkadot JS Apps to ws://127.0.0.1:9944. Next, select the Switch button, and the site should connect to your Indracore node. With Polkadot JS Apps connected, you will see the local Indracore node producing blocks. To check the balance of an address, you can simply go to the Accounts tab. You can find more information in this site.","title":"Setting Up Local Node"},{"location":"Maintain/guides-how-to-setup-indracore-local-node/#setting-up-a-indracore-node-and-connecting-to-the-polkadot-js-gui","text":"","title":"Setting Up a Indracore Node and Connecting to the Polkadot JS GUI"},{"location":"Maintain/guides-how-to-setup-indracore-local-node/#introduction","text":"This guide outlines the steps needed to create a standalone local node for testing of Indracore. If you follow to the end of this guide, you will have a Indracore node running in your local environment and will be able to connect it to the default Polkadot JS GUI.","title":"Introduction"},{"location":"Maintain/guides-how-to-setup-indracore-local-node/#installation-and-setup","text":"We start by cloning the Indracore following repo: https://github.com/selendra/indracore page. git clone https://github.com/selendra/indracore.git Next, install Substrate and all its prerequisites (including Rust) by executing: curl https://getsubstrate.io -sSf | bash -s -- --fast Now, lets make some checks (correct version of Rust nightly) with the initialization script: ./scripts/init.sh Once you have followed all of the procedures above, it's time to build the standalone node by running: cargo build --release Here is what the tail end of the build output should look like: Then, you will want to run the node in dev mode using the following command: ./target/release/indracore --dev You should see an output that looks like the following, showing that blocks are being produced:","title":"Installation and Setup"},{"location":"Maintain/guides-how-to-setup-indracore-local-node/#connecting-polkadot-js-apps-to-a-local-indracore-node","text":"On the UI of Selendra click on the top left corner to open the menu to configure the networks, and then navigate down to open the Development sub-menu. In there, you will want to toggle the \"Local Node\" option, which points Polkadot JS Apps to ws://127.0.0.1:9944. Next, select the Switch button, and the site should connect to your Indracore node. With Polkadot JS Apps connected, you will see the local Indracore node producing blocks. To check the balance of an address, you can simply go to the Accounts tab. You can find more information in this site.","title":"Connecting Polkadot JS Apps to a Local Indracore Node"},{"location":"Maintain/guides-how-to-validate-selendra/","text":"Run a Validator Introduction Running a validator on a live network is a lot of responsibility! You will be accountable for not only your own stake, but also the stake of your current nominators. If you make a mistake and get slashed, your money and your reputation will be at risk. However, running a validator can also be very rewarding, knowing that you contribute to the security of a decentralized network while growing your stash. Initial Set-up Requirements Provisioning the server with following recommendation: OS: Linux x64 recommend Ubuntu 18.04 x64. RAM: 2GB or above. HDD/SSD: 60GB. Install Rust curl https://sh.rustup.rs -sSf | sh rustup update install dependencies sudo apt install make clang pkg-config libssl-dev build-essential Maxos brew install cmake pkg-config openssl git llvm Install & Configure Network Time Protocol (NTP) Client If you are using Ubuntu 18.04 / 19.04, NTP Client should be installed by default. timedatectl If NTP is installed and running, you should see System clock synchronized: yes Do not see it, you can install it by executing: sudo apt-get install ntp ntpd will be started automatically after install. You can query ntpd for status information to verify that everything is working: sudo ntpq -p Building and Installing the indracore Binary git clone https://github.com/selendra/indracore.git cd indracore ./scripts/init.sh cargo build --release You can begin syncing your node by running the following command: ./target/release/indracore --pruning=archive --chain sel if you do not want to start in validator mode right away. The --pruning=archive flag is implied by the --validator and --sentry flags, so it is only required explicitly if you start your node without one of these two options. If you do not set your pruning to archive node, even when not running in validator and sentry mode, you will need to re-sync your database when you switch. Bond SEL Make sure not to bond all your SEL balance since you will be unable to pay transaction fees from your bonded balance. It is now time to set up our validator. We will do the following: Bond the SEL of the Stash account. These SEL will be put at stake for the security of the network and can be slashed. Select the Controller. This is the account that will decide when to start or stop validating. First, go to the Staking section. Click on \"Account Actions\", and then the \"New stake\" button. Once everything is filled in properly, click Bond and sign the transaction with your Stash account. After a few seconds, you should see an \"ExtrinsicSuccess\" message. You should now see a new card with all your accounts (note: you may need to refresh the screen). The bonded amount on the right corresponds to the funds bonded by the Stash account. Set Session Keys Navigate to Toolbox tab and select RPC Calls then select the author > rotateKeys() option and remember to save the output that you get back for a later step. Validate If you go to the \"Staking\" tab, you will see a list of active validators currently running on the network. At the top of the page, it shows how many validator slots are available as well as how many nodes have signaled their intention to be a validator. You can also go to the \"Waiting\" tab to double check to see whether your node is listed there.","title":"Set Up a validator"},{"location":"Maintain/guides-how-to-validate-selendra/#run-a-validator","text":"","title":"Run a Validator"},{"location":"Maintain/guides-how-to-validate-selendra/#introduction","text":"Running a validator on a live network is a lot of responsibility! You will be accountable for not only your own stake, but also the stake of your current nominators. If you make a mistake and get slashed, your money and your reputation will be at risk. However, running a validator can also be very rewarding, knowing that you contribute to the security of a decentralized network while growing your stash.","title":"Introduction"},{"location":"Maintain/guides-how-to-validate-selendra/#initial-set-up","text":"","title":"Initial Set-up"},{"location":"Maintain/guides-how-to-validate-selendra/#requirements","text":"Provisioning the server with following recommendation: OS: Linux x64 recommend Ubuntu 18.04 x64. RAM: 2GB or above. HDD/SSD: 60GB.","title":"Requirements"},{"location":"Maintain/guides-how-to-validate-selendra/#install-rust","text":"curl https://sh.rustup.rs -sSf | sh rustup update install dependencies sudo apt install make clang pkg-config libssl-dev build-essential Maxos brew install cmake pkg-config openssl git llvm","title":"Install Rust"},{"location":"Maintain/guides-how-to-validate-selendra/#install-configure-network-time-protocol-ntp-client","text":"If you are using Ubuntu 18.04 / 19.04, NTP Client should be installed by default. timedatectl If NTP is installed and running, you should see System clock synchronized: yes Do not see it, you can install it by executing: sudo apt-get install ntp ntpd will be started automatically after install. You can query ntpd for status information to verify that everything is working: sudo ntpq -p","title":"Install &amp; Configure Network Time Protocol (NTP) Client"},{"location":"Maintain/guides-how-to-validate-selendra/#building-and-installing-the-indracore-binary","text":"git clone https://github.com/selendra/indracore.git cd indracore ./scripts/init.sh cargo build --release You can begin syncing your node by running the following command: ./target/release/indracore --pruning=archive --chain sel if you do not want to start in validator mode right away. The --pruning=archive flag is implied by the --validator and --sentry flags, so it is only required explicitly if you start your node without one of these two options. If you do not set your pruning to archive node, even when not running in validator and sentry mode, you will need to re-sync your database when you switch.","title":"Building and Installing the indracore Binary"},{"location":"Maintain/guides-how-to-validate-selendra/#bond-sel","text":"Make sure not to bond all your SEL balance since you will be unable to pay transaction fees from your bonded balance. It is now time to set up our validator. We will do the following: Bond the SEL of the Stash account. These SEL will be put at stake for the security of the network and can be slashed. Select the Controller. This is the account that will decide when to start or stop validating. First, go to the Staking section. Click on \"Account Actions\", and then the \"New stake\" button. Once everything is filled in properly, click Bond and sign the transaction with your Stash account. After a few seconds, you should see an \"ExtrinsicSuccess\" message. You should now see a new card with all your accounts (note: you may need to refresh the screen). The bonded amount on the right corresponds to the funds bonded by the Stash account.","title":"Bond SEL"},{"location":"Maintain/guides-how-to-validate-selendra/#set-session-keys","text":"Navigate to Toolbox tab and select RPC Calls then select the author > rotateKeys() option and remember to save the output that you get back for a later step.","title":"Set Session Keys"},{"location":"Maintain/guides-how-to-validate-selendra/#validate","text":"If you go to the \"Staking\" tab, you will see a list of active validators currently running on the network. At the top of the page, it shows how many validator slots are available as well as how many nodes have signaled their intention to be a validator. You can also go to the \"Waiting\" tab to double check to see whether your node is listed there.","title":"Validate"},{"location":"SmartContracts/guides-building-your-contract/","text":"Building Your Contract Run the following command to compile your smart contract:: cargo +nightly contract build This special command will turn your ink! project into a Wasm binary, a metadata file (which contains the contract's ABI) and a .contract file which bundles both. This .contract file can be used for deploying your contract to your chain. If all goes well, To which you should see a successful test completion: Original wasm size: 19.1K, Optimized: 2.5K Your contract artifacts are ready. You can find them in: /home/ayoung/project/mycontract/target/ink - mycontract.contract (code + metadata) - mycontract.wasm (the contract's code) - metadata.json (the contract's metadata) you should see a target folder which contains these files: \u2514\u2500\u2500 metadata.json \u2514\u2500\u2500 mycontract.contract \u2514\u2500\u2500 mycontract.wasm We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Building Your Contract"},{"location":"SmartContracts/guides-building-your-contract/#building-your-contract","text":"Run the following command to compile your smart contract:: cargo +nightly contract build This special command will turn your ink! project into a Wasm binary, a metadata file (which contains the contract's ABI) and a .contract file which bundles both. This .contract file can be used for deploying your contract to your chain. If all goes well, To which you should see a successful test completion: Original wasm size: 19.1K, Optimized: 2.5K Your contract artifacts are ready. You can find them in: /home/ayoung/project/mycontract/target/ink - mycontract.contract (code + metadata) - mycontract.wasm (the contract's code) - metadata.json (the contract's metadata) you should see a target folder which contains these files: \u2514\u2500\u2500 metadata.json \u2514\u2500\u2500 mycontract.contract \u2514\u2500\u2500 mycontract.wasm We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Building Your Contract"},{"location":"SmartContracts/guides-creating-ink-project/","text":"Creating an ink! Project We are going to use the ink! CLI to generate the files we need for a Substrate smart contract project. Make sure you are in your working directory, and then run: cargo contract new mycontract This command will create a new project folder named mycontract which we will explore: cd mycontract ink! Contract Project . \u251c\u2500\u2500 Cargo.toml <----- Rust Dependencies and ink! Configuration \u2514\u2500\u2500 lib.rs <-- Contract Source Code 0 directories, 2 files Testing Your Contract You will see at the bottom of the source code there is a simple test which verifies the functionality of the contract. We can quickly test that this code is functioning as expected using the off-chain test environment that ink! provides. In your project folder run: cargo +nightly test To which you should see a successful test completion: running 2 tests test mycontract::tests::default_works ... ok test mycontract::tests::it_works ... ok test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Creating an ink! Project"},{"location":"SmartContracts/guides-creating-ink-project/#creating-an-ink-project","text":"We are going to use the ink! CLI to generate the files we need for a Substrate smart contract project. Make sure you are in your working directory, and then run: cargo contract new mycontract This command will create a new project folder named mycontract which we will explore: cd mycontract ink! Contract Project . \u251c\u2500\u2500 Cargo.toml <----- Rust Dependencies and ink! Configuration \u2514\u2500\u2500 lib.rs <-- Contract Source Code 0 directories, 2 files","title":"Creating an ink! Project"},{"location":"SmartContracts/guides-creating-ink-project/#testing-your-contract","text":"You will see at the bottom of the source code there is a simple test which verifies the functionality of the contract. We can quickly test that this code is functioning as expected using the off-chain test environment that ink! provides. In your project folder run: cargo +nightly test To which you should see a successful test completion: running 2 tests test mycontract::tests::default_works ... ok test mycontract::tests::it_works ... ok test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Testing Your Contract"},{"location":"SmartContracts/guides-how-to-call-your-contract/","text":"Calling Your Contract Smart contract messages To communicate with Smart contracts. We use \"messages\". It's possible to pass two kinds of messages: - messages that change a smart contract's state should be sent as transactions; - messages that don't change a state could be called by using RPC calls. Let's try to read our smart contract value by get() message call. Second, let's change a smart contract state by sending a \"message\", send flip() message that flips smart contract boolean flag. Verify the result: Using these two kinds of messages, your DApp can easily write and read the smart contract data. Have fun! We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Calling Your Contract"},{"location":"SmartContracts/guides-how-to-call-your-contract/#calling-your-contract","text":"","title":"Calling Your Contract"},{"location":"SmartContracts/guides-how-to-call-your-contract/#smart-contract-messages","text":"To communicate with Smart contracts. We use \"messages\". It's possible to pass two kinds of messages: - messages that change a smart contract's state should be sent as transactions; - messages that don't change a state could be called by using RPC calls. Let's try to read our smart contract value by get() message call. Second, let's change a smart contract state by sending a \"message\", send flip() message that flips smart contract boolean flag. Verify the result: Using these two kinds of messages, your DApp can easily write and read the smart contract data. Have fun! We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Smart contract messages"},{"location":"SmartContracts/guides-how-to-deploy-a-wasm-contract/","text":"Deploy Your Smart Contract on Selendra Before deploying your smart contract on the Selendra Mainnet, you are recommended deploying the contract on your local development chain, and after that on the Indranet . First, select Indranet on the top left of the chain selection menu. Click Contracts tab and choose Upload & deploy code. Upload .conract bundle Press Next to proceed next operation. Enter the amount of endowment for contract and click Deploy. The contract is waiting the account to sign. If you are using the polkadot-js enter the password to authenticate. Confirm from UI that your contract is on the blockchain. Now you should ready to deploy. Press deploy. Enter your contract name, and confirm the edowment. Now your contract is ready. We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Deploy a WASM Contract"},{"location":"SmartContracts/guides-how-to-deploy-a-wasm-contract/#deploy-your-smart-contract-on-selendra","text":"Before deploying your smart contract on the Selendra Mainnet, you are recommended deploying the contract on your local development chain, and after that on the Indranet . First, select Indranet on the top left of the chain selection menu. Click Contracts tab and choose Upload & deploy code. Upload .conract bundle Press Next to proceed next operation. Enter the amount of endowment for contract and click Deploy. The contract is waiting the account to sign. If you are using the polkadot-js enter the password to authenticate. Confirm from UI that your contract is on the blockchain. Now you should ready to deploy. Press deploy. Enter your contract name, and confirm the edowment. Now your contract is ready. We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Deploy Your Smart Contract on Selendra"},{"location":"SmartContracts/guides-how-to-setup-environment/","text":"Setup Environment Introduction Selendra is based on Substrate. we support ink!, an eDSL to write WebAssembly based smart contracts using the Rust programming language. Learn more from Parity Technologies refer to this page: https://substrate.dev/substrate-contracts-workshop/#/ Prerequisites Arch Linux pacman -Syu --needed --noconfirm cmake gcc openssl-1.0 pkgconf git clang export OPENSSL_LIB_DIR=\"/usr/lib/openssl-1.0\" export OPENSSL_INCLUDE_DIR=\"/usr/include/openssl-1.0\" Ubuntu/Debian Use a terminal shell to execute the following commands: sudo apt update # May prompt for location information sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl libz-dev macOS Open the Terminal application and execute the following commands: # Install Homebrew if necessary https://brew.sh/ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" # Make sure Homebrew is up-to-date, install openssl and cmake brew update brew install openssl cmake Latest Nightly Use a terminal shell to execute the following commands: rustup update rustup update nightly rustup target add wasm32-unknown-unknown --toolchain nightly ink! CLI The final tool we will be installing is the ink! command line utility which will make setting up Substrate smart contract projects easier. You can install the utility using Cargo with: cargo install cargo-contract --force Use the --force to ensure you are updated to the most recent cargo-contract version. You can then use cargo contract --help to start exploring the commands made available to you. Setting Up a Indracore Node Make sure you have running node read for your contract to be deployed. If you had not installed the node yet following the Setting Up Local Node We Want to Hear From You If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"Setup Environment"},{"location":"SmartContracts/guides-how-to-setup-environment/#setup-environment","text":"","title":"Setup Environment"},{"location":"SmartContracts/guides-how-to-setup-environment/#introduction","text":"Selendra is based on Substrate. we support ink!, an eDSL to write WebAssembly based smart contracts using the Rust programming language. Learn more from Parity Technologies refer to this page: https://substrate.dev/substrate-contracts-workshop/#/","title":"Introduction"},{"location":"SmartContracts/guides-how-to-setup-environment/#prerequisites","text":"","title":"Prerequisites"},{"location":"SmartContracts/guides-how-to-setup-environment/#arch-linux","text":"pacman -Syu --needed --noconfirm cmake gcc openssl-1.0 pkgconf git clang export OPENSSL_LIB_DIR=\"/usr/lib/openssl-1.0\" export OPENSSL_INCLUDE_DIR=\"/usr/include/openssl-1.0\"","title":"Arch Linux"},{"location":"SmartContracts/guides-how-to-setup-environment/#ubuntudebian","text":"Use a terminal shell to execute the following commands: sudo apt update # May prompt for location information sudo apt install -y cmake pkg-config libssl-dev git build-essential clang libclang-dev curl libz-dev","title":"Ubuntu/Debian"},{"location":"SmartContracts/guides-how-to-setup-environment/#macos","text":"Open the Terminal application and execute the following commands: # Install Homebrew if necessary https://brew.sh/ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" # Make sure Homebrew is up-to-date, install openssl and cmake brew update brew install openssl cmake","title":"macOS"},{"location":"SmartContracts/guides-how-to-setup-environment/#latest-nightly","text":"Use a terminal shell to execute the following commands: rustup update rustup update nightly rustup target add wasm32-unknown-unknown --toolchain nightly","title":"Latest Nightly"},{"location":"SmartContracts/guides-how-to-setup-environment/#ink-cli","text":"The final tool we will be installing is the ink! command line utility which will make setting up Substrate smart contract projects easier. You can install the utility using Cargo with: cargo install cargo-contract --force Use the --force to ensure you are updated to the most recent cargo-contract version. You can then use cargo contract --help to start exploring the commands made available to you.","title":"ink! CLI"},{"location":"SmartContracts/guides-how-to-setup-environment/#setting-up-a-indracore-node","text":"Make sure you have running node read for your contract to be deployed. If you had not installed the node yet following the Setting Up Local Node","title":"Setting Up a Indracore Node"},{"location":"SmartContracts/guides-how-to-setup-environment/#we-want-to-hear-from-you","text":"If you have any feedback regarding deploying Smartcontract on your project, feel free to reach out through our official community at Telegram group here .","title":"We Want to Hear From You"},{"location":"basic/create-account/","text":"Create Account On Selendra This method involves using the Indra App based on Polkadot UI and the Polkadot.js browser extension. Create Account Using Indra Apps Navigate to our Indra Apps and go to Account tab. Click Add Account. Name: The name for this account and how it will appear under your addresses. With an on-chain identity, it can be made available to others. Mnemonic: The secret seed value for this account. Ensure that you keep this in a safe place because access to the seed will allow you to re-create the account. Password: The password and password confirmation for this account. This is required to authenticate any transactions made and to encrypt the keypair. Click Next. Save your copy backup account file.","title":"Create an Account"},{"location":"basic/create-account/#create-account-on-selendra","text":"This method involves using the Indra App based on Polkadot UI and the Polkadot.js browser extension.","title":"Create Account On Selendra"},{"location":"basic/create-account/#create-account-using-indra-apps","text":"Navigate to our Indra Apps and go to Account tab. Click Add Account. Name: The name for this account and how it will appear under your addresses. With an on-chain identity, it can be made available to others. Mnemonic: The secret seed value for this account. Ensure that you keep this in a safe place because access to the seed will allow you to re-create the account. Password: The password and password confirmation for this account. This is required to authenticate any transactions made and to encrypt the keypair. Click Next. Save your copy backup account file.","title":"Create Account Using Indra Apps"},{"location":"basic/getting-started/","text":"Getting Started It's time to get started on the Indracore network! Please check out our recommended list. For brand-new learners of Blockchain technology: The Blockchain Fundamentals MOOC course is a great introduction to familiarizing yourself with crytography, blockchain concepts, decentralization, networks, crytocurrency, and so much more. This is recommended for users with backgrounds of all levels, and is also a free course. For brand-new learners of Indracore: Reading \"What is Selendra\" on Medium. Claiming Selendra SEL tokens For brand-new learners, please head over to our Selendra Docs .","title":"Getting Started"},{"location":"basic/getting-started/#getting-started","text":"It's time to get started on the Indracore network! Please check out our recommended list. For brand-new learners of Blockchain technology: The Blockchain Fundamentals MOOC course is a great introduction to familiarizing yourself with crytography, blockchain concepts, decentralization, networks, crytocurrency, and so much more. This is recommended for users with backgrounds of all levels, and is also a free course. For brand-new learners of Indracore: Reading \"What is Selendra\" on Medium. Claiming Selendra SEL tokens For brand-new learners, please head over to our Selendra Docs .","title":"Getting Started"},{"location":"basic/send-sel/","text":"Send SEL This method involves using the Indra App based on Polkadot UI and the Polkadot.js browser extension. Prerequire : Selendra account Polkadot.js to your browser and connected your wallet Some testnet or mainnet SEL to send Visit the Indra App based . Once connected, click the Accounts tab in the left sidebar, or go directly to the Transfer tab. In the Accounts tab, click the send button in the row of the account from which you want to send. Next, confirm the accounts you want to send from and send to, using the address fields. You can delete the information in the 'send to address' to enter in any recipient address, or utilize the dropdown to send between your own connected accounts in your Polkadot.js wallet. Once the amount is entered and all the information is reviewed and confirmed (consider cryptocurrency transactions as irreversible, so be careful,) click \"Make Transfer.\" You will see a screen similar to this next, where you can see you transaction fees, can include a tip to the validator who authors the block for faster processing of the transaction (uncommon), and otherwise confirm sending by signing the transaction. Advanced: You can also pre-sign but not submit this transaction to the network (uncommon) by using the bottom left 'Sign and Submit' toggle and entering a nonce and a duration for the validity of the signed transaction. Once you hit sign and submit, your Polkadot.js browser extension will open a popup for your account password for the 'send from' account, and you will sign the transaction from your wallet. Once you sign the transaction, the network receives it and you are done. You can explore the transaction details through a block explorer.","title":"Send SEL"},{"location":"basic/send-sel/#send-sel","text":"This method involves using the Indra App based on Polkadot UI and the Polkadot.js browser extension.","title":"Send SEL"},{"location":"basic/send-sel/#prerequire","text":"Selendra account Polkadot.js to your browser and connected your wallet Some testnet or mainnet SEL to send Visit the Indra App based . Once connected, click the Accounts tab in the left sidebar, or go directly to the Transfer tab. In the Accounts tab, click the send button in the row of the account from which you want to send. Next, confirm the accounts you want to send from and send to, using the address fields. You can delete the information in the 'send to address' to enter in any recipient address, or utilize the dropdown to send between your own connected accounts in your Polkadot.js wallet. Once the amount is entered and all the information is reviewed and confirmed (consider cryptocurrency transactions as irreversible, so be careful,) click \"Make Transfer.\" You will see a screen similar to this next, where you can see you transaction fees, can include a tip to the validator who authors the block for faster processing of the transaction (uncommon), and otherwise confirm sending by signing the transaction. Advanced: You can also pre-sign but not submit this transaction to the network (uncommon) by using the bottom left 'Sign and Submit' toggle and entering a nonce and a duration for the validity of the signed transaction. Once you hit sign and submit, your Polkadot.js browser extension will open a popup for your account password for the 'send from' account, and you will sign the transaction from your wallet. Once you sign the transaction, the network receives it and you are done. You can explore the transaction details through a block explorer.","title":"Prerequire :"},{"location":"network/run-a-validator/","text":"","title":"Run an Indra Validator"}]}